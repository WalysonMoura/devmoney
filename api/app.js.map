{"version":3,"sources":["../src/app.ts","../src/routes/transactions.ts","../src/utils/knex.ts","../src/env/index.ts","../src/database.ts","../src/middlewares/check-session-id-exists.ts"],"sourcesContent":["import cookie from '@fastify/cookie'\nimport fastify from 'fastify'\nimport { transactionsRoutes } from './routes/transactions'\n\nexport const app = fastify()\n\napp.register(cookie)\n\napp.register(transactionsRoutes, {\n  prefix: \"transactions\",\n});\n\n","import { FastifyInstance } from \"fastify\";\nimport { z } from \"zod\";\n\nimport { randomUUID } from \"node:crypto\";\nimport { knex } from \"../utils/knex\";\nimport { checkSessionIdExists } from \"../middlewares/check-session-id-exists\";\n\nexport async function transactionsRoutes(app: FastifyInstance) {\n  app.get(\n    \"/\",\n    {\n      preHandler: [checkSessionIdExists],\n    },\n    async (request, reply) => {\n      const { sessionId } = request.cookies;\n\n      const transactions = await knex(\"transactions\")\n        .where(\"session_id\", sessionId)\n        .select();\n\n      return { transactions };\n    }\n  );\n  app.get(\n    \"/:id\",\n    {\n      preHandler: [checkSessionIdExists],\n    },\n    async (request, reply) => {\n      const getTransactionsParamsSchema = z.object({\n        id: z.string().uuid(),\n      });\n\n      const { id } = getTransactionsParamsSchema.parse(request.params);\n      const { sessionId } = request.cookies;\n\n      const transactions = await knex(\"transactions\")\n        .where({\n          session_id: sessionId,\n          id,\n        })\n        .first();\n\n      return {\n        transactions,\n      };\n    }\n  );\n  app.get(\n    \"/sumary\",\n    {\n      preHandler: [checkSessionIdExists],\n    },\n    async (request, reply) => {\n      const { sessionId } = request.cookies;\n\n      const summary = await knex(\"transactions\")\n        .where(\"session_id\", sessionId)\n        .sum(\"amount\", { as: \"amount\" })\n        .first();\n\n      return { summary };\n    }\n  );\n  app.post(\"/\", async (request, reply) => {\n    const createTransactionBodySchema = z.object({\n      title: z.string(),\n      amount: z.number(),\n      type: z.enum([\"credit\", \"debit\"]),\n    });\n\n    const { amount, title, type } = createTransactionBodySchema.parse(\n      request.body\n    );\n\n    let sessionId = request.cookies.sessionId;\n\n    if (!sessionId) {\n      sessionId = randomUUID();\n\n      reply.setCookie(\"sessionId\", sessionId, {\n        path: \"/\",\n        maxAge: 1000 * 60 * 60 * 24 * 7,\n      });\n    }\n\n    await knex(\"transactions\").insert({\n      id: randomUUID(),\n      title,\n      amount: type === \"credit\" ? amount : amount * -1,\n      session_id: sessionId,\n    });\n\n    return reply.status(201).send();\n  });\n}\n","import { Knex, knex as setupKnex } from \"knex\";\nimport { config } from \"../database\";\n\nexport const knex = setupKnex(config);\n","import { config } from \"dotenv\";\nimport { z } from \"zod\";\n\nif (process.env.NODE_ENV === \"test\") {\n  config({ path: \".env.test\" });\n} else {\n  config();\n}\n\nconst envSchema = z.object({\n  NODE_ENV: z.enum([\"development\", \"test\", \"production\"]).default(\"production\"),\n  DATABASE_CLIENT: z.enum([\"sqlite3\", \"pg\"]).default(\"sqlite3\"),\n  DATABASE_URL: z.string(),\n  PORT: z.coerce.number().default(3000),\n});\n\nconst _env = envSchema.safeParse(process.env);\n\nif (_env.success === false) {\n  console.error(\"⚠️ Invalid environment variables\", _env.error.format());\n\n  throw new Error(\"Invalid environment variables.\");\n}\n\nexport const env = _env.data;\n","import { Knex} from \"knex\";\n\nimport { env } from \"./env\";\n\nexport const config: Knex.Config = {\n  client: env.DATABASE_CLIENT,\n  connection:\n    env.DATABASE_CLIENT === 'sqlite3'\n      ? {\n          filename: env.DATABASE_URL,\n        }\n      : env.DATABASE_URL,\n  useNullAsDefault: true,\n  migrations: {\n    extension: 'ts',\n    directory: './db/migrations',\n  },\n}\n\n/* export const configd: { [key: string]: Knex.Config } = {\n  development: {\n    client: 'sqlite3',\n    connection: {\n      filename: env.DATABASE_URL,\n    },\n    useNullAsDefault: true,\n    migrations: {\n      extension: \"ts\",\n      directory: \"./db/migrations\",\n    },\n  },\n\n  staging: {\n    client: \"postgresql\",\n    connection: {\n      database: \"my_db\",\n      user: \"username\",\n      password: \"password\",\n    },\n    pool: {\n      min: 2,\n      max: 10,\n    },\n    migrations: {\n      tableName: \"knex_migrations\",\n    },\n  },\n\n  production: {\n    client: \"postgresql\",\n    connection: {\n      database: \"my_db\",\n      user: \"username\",\n      password: \"password\",\n    },\n    pool: {\n      min: 2,\n      max: 10,\n    },\n    migrations: {\n      tableName: \"knex_migrations\",\n    },\n  },\n};\n */\n","import { FastifyReply, FastifyRequest } from \"fastify\";\n\nexport async function checkSessionIdExists(\n  request: FastifyRequest,\n  reply: FastifyReply\n) {\n  const sessionId = request.cookies.sessionId;\n\n  if (!sessionId) {\n    return reply.status(401).send({\n      error: \"Unauthorized.\",\n    });\n  }\n}\n"],"mappings":"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","names":["import_zod","config","setupKnex","config","app","fastify","cookie"]}